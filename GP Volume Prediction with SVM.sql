%sql
select * from gp_dataset order by day desc;

%script

create view gp_data_2016 as select * from gp_dataset where day > '1-Jan-2016';

CREATE OR REPLACE VIEW TRAIN_GP_DATA_1 AS SELECT DAY, LAST_TRADED_PRICE, HIGH, LOW, OPENING_PRICE, CLOSING_PRICE, VOLUME FROM gp_data_2016 SAMPLE (70) SEED (1);

CREATE OR REPLACE VIEW TEST_GP_DATA_1 AS SELECT DAY, LAST_TRADED_PRICE, HIGH, LOW, OPENING_PRICE, CLOSING_PRICE, VOLUME FROM gp_data_2016 MINUS SELECT * FROM TRAIN_GP_DATA_1;

%script
BEGIN DBMS_DATA_MINING.DROP_MODEL('SVM_MOD_GP');
EXCEPTION WHEN OTHERS THEN NULL; END;
/
DECLARE
    v_setlst DBMS_DATA_MINING.SETTING_LIST;
BEGIN
    v_setlst('ALGO_NAME'):= 'ALGO_SUPPORT_VECTOR_MACHINES'; -- choose SVM algorithm
    v_setlst('SVMS_KERNEL_FUNCTION')  :='SVMS_LINEAR';      -- choose linear kernel, which provides coefficients
    --v_setlst('ODMS_PARTITION_COLUMNS'):='CUST_GENDER';      -- choose column on which to partition the data, gender

    DBMS_DATA_MINING.CREATE_MODEL2(
        MODEL_NAME          => 'SVM_MOD_GP',
        MINING_FUNCTION     => 'REGRESSION',
        DATA_QUERY          => 'SELECT * FROM TRAIN_GP_DATA_1',
        SET_LIST            => v_setlst,
        CASE_ID_COLUMN_NAME => 'DAY',
        TARGET_COLUMN_NAME  => 'VOLUME');
END;

%sql

SELECT SETTING_NAME, SETTING_VALUE
  FROM USER_MINING_MODEL_SETTINGS
  WHERE MODEL_NAME = 'SVM_MOD_GP'
  ORDER BY SETTING_NAME;
  
%sql

SELECT TO_CHAR(DAY,'YY-MM-DD') DAY, VOLUME,
       ROUND(PREDICTION(SVM_MOD_GP USING *),2) PREDICTED_VOLUMNE
FROM TRAIN_GP_DATA_1
ORDER BY DAY;

%sql
SELECT TO_CHAR(DAY,'YY-MM-DD') DAY, VOLUME,
       ROUND(PREDICTION(SVM_MOD_GP USING *),2) PREDICTED_VOLUMNE
FROM TEST_GP_DATA_1
ORDER BY DAY;

%script
DECLARE
    MEAN NUMBER;
    NUMBER_OF_ROWS INT;
    RMSE NUMBER := 0;
    MSE NUMBER := 0;
    MAE NUMBER := 0;
BEGIN
    SELECT COUNT(*), SUM(POWER((VOLUME - ROUND(PREDICTION(SVM_MOD_GP USING *),2)), 2)) INTO NUMBER_OF_ROWS, MEAN
    FROM TEST_GP_DATA_1;
    RMSE := SQRT(MEAN/NUMBER_OF_ROWS);
    MSE := MEAN/NUMBER_OF_ROWS;
    DBMS_OUTPUT.PUT_LINE('RMSE ' || TO_CHAR(ROUND(RMSE, 2)));
    DBMS_OUTPUT.PUT_LINE('MSE ' || TO_CHAR(ROUND(MSE, 2)));
    SELECT COUNT(*), SUM(ABS(VOLUME - ROUND(PREDICTION(SVM_MOD_GP USING *),2))) INTO NUMBER_OF_ROWS, MEAN
    FROM TEST_GP_DATA_1;
    MAE := MEAN/NUMBER_OF_ROWS;
    DBMS_OUTPUT.PUT_LINE('MAE ' || TO_CHAR(ROUND(MAE, 2)));
END;